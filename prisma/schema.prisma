generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma/client"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Simple source data for the demo
model SourceData {
  id       Int    @id @default(autoincrement())
  name     String
  price    Float
  category String
}

// Angluin's Method Implementation
model LearningSession {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  status        String // active, completed, paused
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  hypotheses    Hypothesis[]
  examples      Example[]
  oracleQueries OracleQuery[]
}

model Hypothesis {
  id              Int              @id @default(autoincrement())
  sessionId       Int
  session         LearningSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  functionCode    String
  description     String
  confidence      Float            @default(0.0)
  status          String // active, refined, rejected
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  examples        Example[]
  counterexamples Counterexample[]
}

model Example {
  id           Int             @id @default(autoincrement())
  sessionId    Int
  session      LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  hypothesisId Int?
  hypothesis   Hypothesis?     @relation(fields: [hypothesisId], references: [id])
  sourceData   String // JSON string of source data
  targetData   String // JSON string of expected target data
  type         String // positive, negative, counterexample
  createdAt    DateTime        @default(now())
}

model Counterexample {
  id           Int        @id @default(autoincrement())
  hypothesisId Int
  hypothesis   Hypothesis @relation(fields: [hypothesisId], references: [id], onDelete: Cascade)
  sourceData   String // JSON string of source data that caused failure
  errorMessage String // Description of why the hypothesis failed
  createdAt    DateTime   @default(now())
}

// Oracle queries for Angluin's L* algorithm
model OracleQuery {
  id        Int             @id @default(autoincrement())
  sessionId Int
  session   LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  queryType String // 'membership' or 'equivalence'
  queryData String // The query data (string for membership, hypothesis for equivalence)
  response  String? // Oracle's response
  status    String // 'pending', 'answered', 'counterexample'
  createdAt DateTime        @default(now())
}
