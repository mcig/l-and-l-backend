generator client {
  provider = "prisma-client-js"
  output   = "generated/prisma/client"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Items to be categorized (e.g., pizzas, drinks, etc.)
model Item {
  id             Int      @id @default(autoincrement())
  name           String
  category       String? // Learned category (for Angluin's algorithm)
  actualCategory String? // True category (for validation/fallback)
  createdAt      DateTime @default(now())
}

// Angluin's L* Algorithm - Learning Session
model LearningSession {
  id            Int           @id @default(autoincrement())
  name          String // e.g., "Food Categorization"
  description   String? // e.g., "Learn to categorize food items"
  status        String // 'active', 'completed'
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  oracleQueries OracleQuery[]
  learnedDFA    LearnedDFA?
}

// Oracle queries for Angluin's L* algorithm
model OracleQuery {
  id        Int             @id @default(autoincrement())
  sessionId Int
  session   LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  queryType String // 'membership' or 'equivalence'
  queryData String // The query string or hypothesis
  response  String? // Oracle's response (yes/no for membership, counterexample for equivalence)
  status    String // 'pending', 'answered'
  createdAt DateTime        @default(now())
}

// Learned Deterministic Finite Automaton
model LearnedDFA {
  id           Int             @id @default(autoincrement())
  sessionId    Int             @unique
  session      LearningSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  states       String // JSON array of states
  alphabet     String // JSON array of symbols
  transitions  String // JSON object of transitions
  startState   String
  acceptStates String // JSON array of accepting states
  createdAt    DateTime        @default(now())
}
